import urx
import math
from math import *
import math3d as m3d
import numpy as np
import time
import plotly.graph_objects as go
import pandas as pd
from decimal import *

def dspacemovement(fig,x,y,z,xptsd,yptsd,zptsd):
    Data = go.Mesh3d(
        
        x=x,
        y=y,
        z=z,
        colorbar_title='z',
       
        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
        name='y',
        showscale=True
    )
    fig.add_trace(Data)

    pt1 = [x[0],y[0],z[0]]
    pt2 = [x[1],y[1],z[1]]
    length = np.linalg.norm(np.subtract(pt2,pt1))
    pt3 = [x[3],y[3],z[3]]
    pt4 = [x[4],y[4],z[4]]
    breadth = np.linalg.norm(np.subtract(pt3,pt1))
    width = np.linalg.norm(np.subtract(pt4,pt1))

    xptsd1 = xptsd
    yptsd1 = yptsd
    zptsd1 = zptsd
    def dspacemove(x,y,z,xptsd,yptsd,zptsd):
        xmax = max(x)
        xmin = min(x)
        ymax = max(y)
        ymin = min(y)
        zmax = max(z)
        zmin = min(z)
        midx = (xmax+xmin)/2
        midy = (ymax+ymin)/2

        flag = 0
        for i in range(len(xptsd)):
            p = [xptsd[i],yptsd[i],zptsd[i]]
            if xmin <= p[0] <= xmax and ymin <= p[1] <= ymax  and zmin <= p[2] <= zmax:
                flag+=1
        return (flag),midx,midy
    
    flag,midx,midy = dspacemove(x,y,z,xptsd,yptsd,zptsd)

    while True:
        flagx = 0
        flagy = 0
        dummyy = yptsd
        dummyflag = flag
        if np.any(yptsd) > midy: 
            yptsd = np.asarray(yptsd)+1
            flagy+=1
        else:
            yptsd = np.asarray(yptsd)-1
            flagy-=1
    #     yptsd = np.asarray(yptsd)+1
    #     zptsd = np.asarray(zptsd)+1
        flag,g,h = dspacemove(x,y,z,xptsd,yptsd,zptsd)
    #     dummyflag = flag
    #     print(flag)
        if flag < dummyflag:
            yptsd = dummyy
    #         print(flag)
            break
    
    dummyflag = 0
    flag = dummyflag

    while True:
        dummyx = xptsd
        dummyflag = flag
    #     print(flag)
        if np.any(xptsd) >midx:
            xptsd = np.asarray(xptsd)+1
            flagx+=1
        else:
            xptsd = np.asarray(xptsd)-1
            flagx-=1
        xptsd = np.asarray(xptsd)+1
        flag,g,h = dspacemove(x,y,z,xptsd,yptsd,zptsd)
        if flag < dummyflag:
            xptsd = dummyx
    #         print("QQQQ")
            break
    xdist = np.mean(np.subtract(xptsd1,xptsd))
    ydist = np.mean(np.subtract(yptsd1,yptsd))
    zdist = np.mean(np.subtract(zptsd1,zptsd))
    
    return xptsd,yptsd,xdist,ydist,zdist


if __name__ == '__main__' :
    x = [-300, -300, 0, 0, -300, -300, 0, 0]
    y = [-250, 0, 0, -250, -250, 0, 0, -250]
    z = [0, 0, 0, 0, 150, 150, 150, 150]
    xptsd = [-567.8667591684277, -567.8667591684277, -567.8667591684277, -567.8667591684277, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -473.22229930702315, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -378.5778394456185, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -283.93337958421387, -189.28891972280917, -189.28891972280917, -189.28891972280917, -189.28891972280917, -189.28891972280917, -189.28891972280917, -189.28891972280917, -189.28891972280917, -189.28891972280917, -189.28891972280917, -94.64445986140457, -94.64445986140457, -94.64445986140457, -94.64445986140457, -94.64445986140457, -94.64445986140457, -94.64445986140457, -94.64445986140457, -94.64445986140457, -94.64445986140457, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    yptsd = [-83.34899213367488, -83.34899213367488, 83.34899213367488, 83.34899213367488, -250.04697640102458, -250.04697640102458, -250.04697640102458, -250.04697640102458, -83.34899213367488, -83.34899213367488, -83.34899213367488, -83.34899213367488, -83.34899213367488, 83.34899213367488, 83.34899213367488, 83.34899213367488, 83.34899213367488, 83.34899213367488, 250.0469764010247, 250.0469764010247, 250.0469764010247, 250.0469764010247, -416.7449606683744, -416.7449606683744, -250.04697640102458, -250.04697640102458, -250.04697640102458, -250.04697640102458, -250.04697640102458, -83.34899213367488, -83.34899213367488, -83.34899213367488, -83.34899213367488, -83.34899213367488, -83.34899213367488, 83.34899213367488, 83.34899213367488, 83.34899213367488, 83.34899213367488, 83.34899213367488, 83.34899213367488, 250.0469764010247, 250.0469764010247, 250.0469764010247, 250.0469764010247, 250.0469764010247, 416.74496066837446, 416.74496066837446, -416.7449606683744, -416.7449606683744, -416.7449606683744, -416.7449606683744, -250.04697640102458, -250.04697640102458, -250.04697640102458, -250.04697640102458, -250.04697640102458, -250.04697640102458, 250.0469764010247, 250.0469764010247, 250.0469764010247, 250.0469764010247, 250.0469764010247, 250.0469764010247, 416.74496066837446, 416.74496066837446, 416.74496066837446, 416.74496066837446, -416.7449606683744, -416.7449606683744, -416.7449606683744, -416.7449606683744, -416.7449606683744, 416.74496066837446, 416.74496066837446, 416.74496066837446, 416.74496066837446, 416.74496066837446, -416.7449606683744, -416.7449606683744, -416.7449606683744, -416.7449606683744, -416.7449606683744, 416.74496066837446, 416.74496066837446, 416.74496066837446, 416.74496066837446, 416.74496066837446, -416.7449606683744, -416.7449606683744, -416.7449606683744, -416.7449606683744, -416.7449606683744, 416.74496066837446, 416.74496066837446, 416.74496066837446, 416.74496066837446, 416.74496066837446]
    zptsd = [110.24671479546222, 231.2087629215725, 110.24671479546222, 231.2087629215725, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 110.24671479546222, 231.2087629215725, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, 594.0949072999031, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, 594.0949072999031, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, 110.24671479546222, 231.2087629215725, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, 594.0949072999031, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, 594.0949072999031, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295, -10.71533333064798, 110.24671479546222, 231.2087629215725, 352.1708110476827, 473.13285917379295]
    fig = go.Figure()
    data1 = go.Scatter3d(x=xptsd,y=yptsd,z=zptsd,mode = 'markers')
    fig.add_trace(data1)
    xptsd,yptsd,xdist,ydist,zdist = dspacemovement(fig,x,y,z,xptsd,yptsd,zptsd)
    print("x-movement : ",xdist)
    print("y-movement : ",ydist)
    print("z-movement : ",zdist)

    data2 = go.Scatter3d(x=xptsd,y=yptsd,z=zptsd,mode = 'markers',marker=dict(opacity = 0.5))
    fig.add_trace(data2)
    fig.show()

